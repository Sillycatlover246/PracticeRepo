docker run: downloads and runs latest version
docker pull: pulls a specific version
docker image ls: shows images [--digests shows the digest tag for a specific image, pinning by digest is the only way to ensure there are no changes are introduced in your containers enviorment]
docker ps: shows running containers
docker ps -a: shows all containers including stopped ones
docker logs [name/container id]
docker stop [name/container id]
docker container prune: will remove all stopped containers




containers vs images
images: templates for containers, it specifies the filesystem, users, default commands etc, images are what we upload and share
containers: groups of processes, based off images 

docker run nginx, going to localhost wont work, in order to interect with nginx server we need to publish the port its listening on, docker run -p(dash p flag) 80:80 nginx, can reroute ports however you like, docker run -p 5000:80 nginx makes the containers port 80 available on our port 5000  (http://localhost:5000)
docker run -p 5000:80 -d nginx, -d detaches the container from the terminal, running it in the background
--rm flag allows you to tell docker to remove the container as soon as it stops, docker run -p 5000:80 -d --rm nginx, then docker stop [name/id] and after stopping the container it will also be deleted thanks to --rm



docker run -e ABC=123 -e DEF=456 python:3.12 python -c "import os;print(os.environ)"
This Docker command runs a Python 3.12 container and sets two environment variables (-e), ABC and DEF, to 123 and 456 respectively. It then executes a Python command that imports the os module and prints the current environment variables

slim & alpine images
docker pull python:3.12 = 1.01GB
docker pull python:3.12-slim = 124.34MB
docker pull python:3.12-alpine = 48.26MB
the alpine version is very small but also very different, not being debian based linux, and instead of the default shell being bash, its default shell is ash, uses apk instead of apt packages etc.


debugging containers
docker exac -it: allows you the execute a process on a running container



presistence relevent to databases in my case
docker run python:3.12 python -c 'f="/data.txt";open(f, a).write(f"freaky!\n");print(open(f).read()) this command will open a file, write freaky! and print it, however everytime you run it we will see 1 copy of freaky! since its starting clean every time
-v (volume)
mkdir mydata
docker run -v mydata:/data python:3.12 python -c 'f="data/data.txt";open(f, a).write(f"freaky!\n");print(open(f).read()) with the changes made, now the /data directory is populated by a volume (-v) beyond the life cycle of the container
